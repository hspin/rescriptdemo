{
  "version": 3,
  "sources": ["../../../../node_modules/.pnpm/rescript@11.0.1/node_modules/rescript/lib/es6/caml.js"],
  "sourcesContent": ["\n\n\nfunction int_compare(x, y) {\n  if (x < y) {\n    return -1;\n  } else if (x === y) {\n    return 0;\n  } else {\n    return 1;\n  }\n}\n\nfunction bool_compare(x, y) {\n  if (x) {\n    if (y) {\n      return 0;\n    } else {\n      return 1;\n    }\n  } else if (y) {\n    return -1;\n  } else {\n    return 0;\n  }\n}\n\nfunction float_compare(x, y) {\n  if (x === y) {\n    return 0;\n  } else if (x < y) {\n    return -1;\n  } else if (x > y || x === x) {\n    return 1;\n  } else if (y === y) {\n    return -1;\n  } else {\n    return 0;\n  }\n}\n\nfunction string_compare(s1, s2) {\n  if (s1 === s2) {\n    return 0;\n  } else if (s1 < s2) {\n    return -1;\n  } else {\n    return 1;\n  }\n}\n\nfunction bool_min(x, y) {\n  if (x) {\n    return y;\n  } else {\n    return x;\n  }\n}\n\nfunction int_min(x, y) {\n  if (x < y) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nfunction float_min(x, y) {\n  if (x < y) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nfunction string_min(x, y) {\n  if (x < y) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nfunction bool_max(x, y) {\n  if (x) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nfunction int_max(x, y) {\n  if (x > y) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nfunction float_max(x, y) {\n  if (x > y) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nfunction string_max(x, y) {\n  if (x > y) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nfunction i64_eq(x, y) {\n  if (x[1] === y[1]) {\n    return x[0] === y[0];\n  } else {\n    return false;\n  }\n}\n\nfunction i64_ge(param, param$1) {\n  var other_hi = param$1[0];\n  var hi = param[0];\n  if (hi > other_hi) {\n    return true;\n  } else if (hi < other_hi) {\n    return false;\n  } else {\n    return param[1] >= param$1[1];\n  }\n}\n\nfunction i64_neq(x, y) {\n  return !i64_eq(x, y);\n}\n\nfunction i64_lt(x, y) {\n  return !i64_ge(x, y);\n}\n\nfunction i64_gt(x, y) {\n  if (x[0] > y[0]) {\n    return true;\n  } else if (x[0] < y[0]) {\n    return false;\n  } else {\n    return x[1] > y[1];\n  }\n}\n\nfunction i64_le(x, y) {\n  return !i64_gt(x, y);\n}\n\nfunction i64_min(x, y) {\n  if (i64_ge(x, y)) {\n    return y;\n  } else {\n    return x;\n  }\n}\n\nfunction i64_max(x, y) {\n  if (i64_gt(x, y)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nexport {\n  int_compare ,\n  bool_compare ,\n  float_compare ,\n  string_compare ,\n  bool_min ,\n  int_min ,\n  float_min ,\n  string_min ,\n  bool_max ,\n  int_max ,\n  float_max ,\n  string_max ,\n  i64_eq ,\n  i64_neq ,\n  i64_lt ,\n  i64_gt ,\n  i64_le ,\n  i64_ge ,\n  i64_min ,\n  i64_max ,\n}\n/* No side effect */\n"],
  "mappings": ";AA2DA,SAAS,QAAQ,GAAG,GAAG;AACrB,MAAI,IAAI,GAAG;AACT,WAAO;AAAA,EACT,OAAO;AACL,WAAO;AAAA,EACT;AACF;AA0BA,SAAS,QAAQ,GAAG,GAAG;AACrB,MAAI,IAAI,GAAG;AACT,WAAO;AAAA,EACT,OAAO;AACL,WAAO;AAAA,EACT;AACF;AAkBA,SAAS,OAAO,GAAG,GAAG;AACpB,MAAI,EAAE,CAAC,MAAM,EAAE,CAAC,GAAG;AACjB,WAAO,EAAE,CAAC,MAAM,EAAE,CAAC;AAAA,EACrB,OAAO;AACL,WAAO;AAAA,EACT;AACF;AAEA,SAAS,OAAO,OAAO,SAAS;AAC9B,MAAI,WAAW,QAAQ,CAAC;AACxB,MAAI,KAAK,MAAM,CAAC;AAChB,MAAI,KAAK,UAAU;AACjB,WAAO;AAAA,EACT,WAAW,KAAK,UAAU;AACxB,WAAO;AAAA,EACT,OAAO;AACL,WAAO,MAAM,CAAC,KAAK,QAAQ,CAAC;AAAA,EAC9B;AACF;AAEA,SAAS,QAAQ,GAAG,GAAG;AACrB,SAAO,CAAC,OAAO,GAAG,CAAC;AACrB;AAEA,SAAS,OAAO,GAAG,GAAG;AACpB,SAAO,CAAC,OAAO,GAAG,CAAC;AACrB;AAEA,SAAS,OAAO,GAAG,GAAG;AACpB,MAAI,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG;AACf,WAAO;AAAA,EACT,WAAW,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG;AACtB,WAAO;AAAA,EACT,OAAO;AACL,WAAO,EAAE,CAAC,IAAI,EAAE,CAAC;AAAA,EACnB;AACF;",
  "names": []
}
